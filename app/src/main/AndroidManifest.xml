<?xml version="1.0" encoding="utf-8"?>
<!--
  android:installLocation Should be set to "internalOnly" as apps installed on the SD Card
  the autostart will not work!
  Source: http://www.e-nature.ch/tech/tag/quickboot_poweron/
-->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.onesecforgod.app"
    android:installLocation="internalOnly" >

    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <!-- Optional permission for reliable local dispatching on non-Google Play devices -->
    <uses-permission android:name="android.permission.WAKE_LOCK" />


  <application
        android:name=".MainApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme" >

        <!--
    MainReceiver is the receiver that catches and filters broadcast intents. Responds to:
    BOOT_COMPLETED Start the MainService to make App ready and keep runnig in the background
    USER_PRESENT   Received when user unlocks screen and sends a message to the MainService
                   to show the message
    MY_PACKAGE_REPLACED  new version of the application has been installed over an existing one
    QUICKBOOT_POWERON This is required in some implementations where devices actually
                   use Fastboot (Hibernation) such as HTC. Some HTC devices wonâ€™t catch the
                   BOOT_COMPLETED broadcast.
                   Source: http://stackoverflow.com/questions/11692923/
                                          any-way-to-know-if-device-booted-from-a-fastboot
        -->
        <receiver
            android:name=".MainReceiver"
            android:enabled="true"
            android:exported="true" >
            <intent-filter android:priority="999" >
                <action android:name="android.intent.action.BOOT_COMPLETED" />
            </intent-filter>
            <intent-filter android:priority="999" >
                <action android:name="android.intent.action.USER_PRESENT" />
            </intent-filter>
            <intent-filter android:priority="999" >
                <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />
            </intent-filter>
            <intent-filter android:priority="999" >
                <action android:name="android.intent.action.QUICKBOOT_POWERON" />
            </intent-filter>
            <intent-filter android:priority="999" >

                <!-- Source: http://stackoverflow.com/questions/11692923/any-way-to-know-if-device-booted-from-a-fastboot -->
                <action android:name="com.htc.intent.action.QUICKBOOT_POWERON" />
            </intent-filter>
        </receiver>

        <!--
    android:stopWithTask If set to true, this service with be automatically stopped when the user
      remove a task rooted in an activity owned by the application.
      Even though the default is false it is a good idea to make it explicit
        -->
        <service
            android:name=".MainService"
            android:enabled="true"
            android:exported="false"
            android:stopWithTask="false" >
        </service>

        <!--
    android:noHistory is important in order to remove the MessageActivity from the task history
      With this option set to true the back button will not bring the message window again
      This can be tested: If the MessageActivity is displayed and not closed automatically
      after some time, open another App from notification. Press the back button, with this set
      to false (default) the MessageActivity will come back on the back button.
      Source: http://stackoverflow.com/a/4376616

    android:excludeFromRecents is important so that the MessageActivity is removed from the
      recent apps list.
      Source: http://stackoverflow.com/a/11059252

    android:taskAffinity defines groupings (name of the task group) of activities. To have this
      in its own task it also helps to have its own affinity.
      Source: http://stackoverflow.com/a/11059252


    android:launchMode when set to SingleInstance, no other activities can be launched in the
      same task
      Source: http://stackoverflow.com/a/11059252

    android:exported Whether the activity can be launched by components of other applications.
      It is a plus to prevent other apps from launching this activity -just in case-
      Source: http://developer.android.com/guide/topics/manifest/activity-element.html#exported
        -->
        <activity
            android:name=".MessageActivity"
            android:excludeFromRecents="true"
            android:exported="false"
            android:label="@string/app_name"
            android:launchMode="singleInstance"
            android:noHistory="true"
            android:taskAffinity=""
            android:theme="@style/AppTheme.Message.FullScreen" >
        </activity>

      <!--
      android:exported Whether the activity can be launched by components of other applications.
      Should be true for the Application to be launchable otherwise in my test the icon
      appreared in the launcher but when clicked a towast appeared saying the App is not
      installed on your phone.
       -->
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />


      <!-- Optionally, register AnalyticsReceiver and AnalyticsService to support background
           dispatching on non-Google Play devices -->
      <receiver android:name="com.google.android.gms.analytics.AnalyticsReceiver"
          android:enabled="true">
        <intent-filter>
          <action android:name="com.google.android.gms.analytics.ANALYTICS_DISPATCH" />
        </intent-filter>
      </receiver>
      <service android:name="com.google.android.gms.analytics.AnalyticsService"
          android:enabled="true"
          android:exported="false"/>

      <!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable
           installation campaign reporting -->
      <receiver android:name="com.google.android.gms.analytics.CampaignTrackingReceiver"
          android:exported="true">
        <intent-filter>
          <action android:name="com.android.vending.INSTALL_REFERRER" />
        </intent-filter>
      </receiver>
      <service android:name="com.google.android.gms.analytics.CampaignTrackingService" />
    
    </application>

</manifest>




